<%= render "/shared/audio_player"%>


<div class="container">
  <!-- Container Introduction (with image / Add Song form + button/ Download and Delete button ) -->
  <div class="card mb-3" style="background: rgba(28, 27, 23, 0.3); backdrop-filter: blur(16px);">
    <div class="p-3">
          <h1><%= @playlist.name %></h1>
      <div class="card-playlist">
        <!-- Image  -->
        <div class="image-div">
          <%= image_tag "Sphere.png", class: "sphere-for-playlist", style: "width: 200px; height: 150px;"%>
        </div>
        <div class="card-body">
            <!-- Add Song form + button  -->
            <div class = "playlist-song-list mt-2" >
              <%= render "playlist_songs/modal", playlist: @playlist, playlist_song: @playlist_song %>
            </div>
            <div class="d-flex align-items-end">
              <%= form_tag playlist_path(@playlist), method: :get do %>
              <% end %>
            </div>
        </div>
        </div>
    </div>
  </div>


  <!-- Download button -->
  <button id="downloadButton" class= "delete-playlist btn-search btn clear-btn btn white m-3">Download Playlist</button>
  <!-- Script from Download button -->
  <script src="https://cdnjs.cloudflare.com/ajax/libs/jszip/3.1.5/jszip.min.js"></script>




  <!-- Song tab  -->

  <div class ="song-table-container">
    <table style="width: 100%; table-layout: fixed;">
      <thead>
        <tr>
          <th class="td:first-child">Song title</th>
          <th class="primary-lavender-4">BPM</th>
          <th>Artist</th>
          <th class="primary-lavender-4">Scale</th>
          <th>Duration</th>
          <th class="primary-lavender-4">Genre</th>
          <th>Delete</th>
        </tr>
      </thead>
      <tbody>
        <% @playlist.songs.each do |song| %>
          <% playlist_song = PlaylistSong.find_by(playlist: @playlist, song: song) %>
          <tr data-action="click->select#selectSong" data-song="<%= song.to_json %>" data-url="<%= cl_video_path song.audio_file.key || '' %>">
            <td><%= song.name %></td>
            <td class="primary-lavender-2"><%= song.bpm %></td>
            <td class="grey"><%= song.artist.name %></td>
            <td class="primary-lavender-2"><%= song.scale %></td>
            <% t = song.seconds.to_i %>
            <% song_duration = Time.at(t).utc.strftime("%H:%M:%S") %>
            <td class="grey"><%= song_duration[3,8] %></td>
            <td class="grey"><span class="song-tag"><%= song.genre %></td>
            <td><%= link_to image_tag("X.svg"), playlist_song_path(playlist_song), data: { turbo_method: :delete, turbo_confirm: "Are you sure you want to remove #{song.name} from your #{@playlist.name} playlist"}, class: 'text-danger' %></td>
          </tr>
        <% end %>
      <tbody>
    </table>
  </div>
</div>


<!-- Delete playlist button -->
<div class="delete-playlist-position">
<%= link_to "Delete Playlist ", playlist_path(@playlist), class: "delete-playlist btn-search btn clear-btn btn white mr-2", data: { turbo_method: :delete, turbo_confirm: "Are you sure you want to delete this playlist?" } %>
</div>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    // Ajouter un gestionnaire de clic pour chaque bouton de téléchargement
    document.querySelectorAll('.download-button').forEach(function(button) {
      button.addEventListener('click', function() {
        var playlistId = this.getAttribute('data-playlist');
        downloadPlaylist(playlistId);
      });
    });

    function downloadPlaylist(playlistId) {
      // Récupérer les informations de la playlist depuis votre backend (adapté à votre logique)
      fetch("/api/playlist/" + playlistId) // Remplacez cette URL par l'URL réelle de votre API
        .then(response => response.json())
        .then(playlistData => {
          // Créer une instance JSZip
          var zip = new JSZip();

          // Ajouter chaque fichier de la playlist au zip
          playlistData.songs.forEach(function(song) {
            // Assurez-vous que votre backend fournit le lien correct vers le fichier audio
            zip.file(song.name + ".mp3", song.audioLink);
          });

          // Générer le fichier zip
          zip.generateAsync({ type: "blob" })
            .then(function(content) {
              // Créer un objet URL pour le contenu du fichier zip
              var zipUrl = URL.createObjectURL(content);

              // Créer un lien invisible pour le téléchargement
              var link = document.createElement('a');
              link.href = zipUrl;
              link.download = playlistData.name + '.zip';

              // Ajouter le lien au document
              document.body.appendChild(link);

              // Déclencher le clic sur le lien pour démarrer le téléchargement
              link.click();

              // Retirer le lien du document après le téléchargement
              document.body.removeChild(link);
            });
        })
        .catch(error => console.error('Error fetching playlist data:', error));
    }
  });
</script>
